#define ON_OFF_VALUE 818
#define F_CPU 16000000UL
#include<util/delay.h>
#include <avr/io.h>
void init_adc();
unsigned short read_adc();
void show_7seg(unsigned short value);
unsigned char num[10] = { // 0 ~ 9
0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x6F};
int main() {
	unsigned short value;
	DDRC = 0xFF;
	DDRG = 0x0F;
	DDRA = 0xFF;
	init_adc();
	while(1) {
		value = read_adc();
		if( value < ON_OFF_VALUE)
		PORTA = 0xFF;
		else
		PORTA = 0x00;
		show_7seg(value);
	}
	return 0;
}
void init_adc()
{
	DDRF &= 0xFE;
	ADMUX = 0x60; // ADLAR 이라는 레지스터값 0x20을 더해서 0x40 ->> 0x60 로 변경
	ADCSRA = 0x87;
}
unsigned short read_adc()
{
	unsigned char adc_low, adc_high;
	unsigned short value;
	ADCSRA |= 0x40;
	while ((ADCSRA & 0x10) != 0x10)
	;
	adc_low = ADCL;
	adc_high = ADCH;
	value = ((unsigned short)adc_high << 2) | ((unsigned short)adc_low>>8);
	return value;
}
void show_7seg(unsigned short value)
{
	int i;
	for(i=0; i<10; i++) {
		PORTC = num[value/1000];
		PORTG = 0x08;
		_delay_ms(2);
		PORTC = num[value/100%10];
		PORTG = 0x04;
		_delay_ms(2);
		PORTC = num[value%100/10];
		PORTG = 0x02;
		_delay_ms(2);
		PORTC = num[value%10];
		PORTG = 0x01;
		_delay_ms(2);
	}
}


/////////////////////////

#define ON_OFF_VALUE 818
#define F_CPU 16000000UL
#define ARYSIZE 20
#include <util/delay.h>
#include <avr/io.h>

void init_adc();
unsigned short read_adc();
void show_7seg(unsigned short value);
unsigned char num[10] = { // 0 ~ 9
0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x6F};
int main() {
	int i;
	int sum=0;
	unsigned short vAry[ARYSIZE] ;
	unsigned short value;
	DDRC = 0xFF;
	DDRG = 0x0F;
	DDRA = 0xFF;
	init_adc();
	while(1) {
		if(sum==0){
			for(i=0;i<ARYSIZE;i++){
				vAry[i] = read_adc();
				sum +=vAry[i];
			}
		}
		for(i=ARYSIZE-1;i>=1;i--){
			vAry[i]=vAry[i-1];
		}
		vAry[0] = read_adc();
		sum=0;
		for(i=0;i<ARYSIZE;i++){
			sum+=vAry[i];
		}
		value = sum/ARYSIZE;
		
		
		if( value < ON_OFF_VALUE)
			PORTA = 0xFF;
		
		else
			PORTA = 0x00;
		show_7seg(value);
	}
	return 0;
}
void init_adc()
{
	DDRF &= 0xFE;
	ADMUX = 0x60; // ADLAR 이라는 레지스터값 0x20을 더해서 0x40 ->> 0x60 로 변경
	ADCSRA = 0x87;
}
unsigned short read_adc()
{
	unsigned char adc_low, adc_high;
	unsigned short value;
	ADCSRA |= 0x40;
	while ((ADCSRA & 0x10) != 0x10)
	;
	adc_low = ADCL;
	adc_high = ADCH;
	value = ((unsigned short)adc_high << 2) | ((unsigned short)adc_low>>6);
	return value;
}
void show_7seg(unsigned short value)
{
	int i;
	for(i=0; i<10; i++) {
		PORTC = num[value/1000];
		PORTG = 0x08;
		_delay_ms(2);
		PORTC = num[value/100%10];
		PORTG = 0x04;
		_delay_ms(2);
		PORTC = num[value%100/10];
		PORTG = 0x02;
		_delay_ms(2);
		PORTC = num[value%10];
		PORTG = 0x01;
		_delay_ms(2);
	}
}

///////////////////////////////////////////

#define ON_OFF_VALUE 50
#define F_CPU 16000000UL
#define ARYSIZE 20
#include <util/delay.h>
#include <avr/io.h>

void init_adc();
unsigned short read_adc();
void show_7seg(unsigned short value);
unsigned char num[10] = { // 0 ~ 9
0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x6F};
int per[9] = {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF};
int main() {
	int i;
	int sum=0;
	unsigned short vAry[ARYSIZE] ;
	unsigned short value;
	DDRC = 0xFF;
	DDRG = 0x0F;
	DDRA = 0xFF;
	init_adc();
	while(1) {
		if(sum==0){
			for(i=0;i<ARYSIZE;i++){
				vAry[i] = read_adc();
				sum +=vAry[i];
			}
		}
		for(i=ARYSIZE-1;i>=1;i--){
			vAry[i]=vAry[i-1];
		}
		vAry[0] = read_adc();
		sum=0;
		for(i=0;i<ARYSIZE;i++){
			sum+=vAry[i];
		}
		value = ((sum/ARYSIZE)/1024.0)*100;
		
		PORTA = per[(value/10)-1];
		
		show_7seg(value);
	}
	return 0;
}
void init_adc()
{
	DDRF &= 0xFE;
	ADMUX = 0x60; // ADLAR 이라는 레지스터값 0x20을 더해서 0x40 ->> 0x60 로 변경
	ADCSRA = 0x87;
}
unsigned short read_adc()
{
	unsigned char adc_low, adc_high;
	unsigned short value;
	ADCSRA |= 0x40;
	while ((ADCSRA & 0x10) != 0x10)
	;
	adc_low = ADCL;
	adc_high = ADCH;
	value = ((unsigned short)adc_high << 2) | ((unsigned short)adc_low>>6);
	return value;
}
void show_7seg(unsigned short value)
{
	int i;
	for(i=0; i<10; i++) {
		PORTC = num[value/1000];
		PORTG = 0x08;
		_delay_ms(2);
		PORTC = num[value/100%10];
		PORTG = 0x04;
		_delay_ms(2);
		PORTC = num[value%100/10];
		PORTG = 0x02;
		_delay_ms(2);
		PORTC = num[value%10];
		PORTG = 0x01;
		_delay_ms(2);
	}
}

///////////////////////////////////////
#define ON_OFF_VALUE 50
#define F_CPU 16000000UL
#define ARYSIZE 20
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/io.h>

void init_adc();
unsigned short read_adc();
void show_7seg(unsigned short value);
#define OVERFLOW_1 65536
#define OVERFLOW_0 256
#define TPS_1 500
#define TPS_0 20
unsigned int tick_time_0,tick_time_1;
int j=0;
int tmp;
int n[] = {252,239,213,189,179,159,142,126,119}; // 시도레미파솔라시도
unsigned char num[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x27, 0x7F, 0x6F}; // 7-seg 0~9
int per[9] = {0x00,0x01,0x03,0x07,0x0F,0x1F,0x3F,0x7F,0xFF}; // led 0~8
int main() {
	int i;
	int sum=0;
	unsigned short vAry[ARYSIZE] ;
	unsigned short value;
	DDRC = 0xFF;
	DDRG = 0x0F;
	DDRA = 0xFF;
	DDRB |=(1<<DDB4);
	TCCR0=0x05; // 16mhz 128분주
	TCCR1B = 0x04;  // 16MHz를 256분주
	TCNT0 = 0;
	///////////////////////////
	TCNT1 = OVERFLOW_1 - 250; // 125를 2배로할당하여 2초지연 할당
	TIMSK = 0x06;       // 타이머0는 compare 0x02, 타이머1 오버플로우 인터럽트 허용
	sei();                 // 전역 인터럽트 허용
	////////////////////
	TCCR0 = 0x1D;
	init_adc();
	while(1) {
		if(sum==0){
			for(i=0;i<ARYSIZE;i++){
				vAry[i] = read_adc();
				sum +=vAry[i];
			}
		}
		for(i=ARYSIZE-1;i>=1;i--){
			vAry[i]=vAry[i-1];
		}
		vAry[0] = read_adc();
		sum=0;
		for(i=0;i<ARYSIZE;i++){
			sum+=vAry[i];
		}
		value = ((sum/ARYSIZE)/1024.0)*100;
		tmp =(value/10)-1;
		PORTA = per[tmp];
		
		show_7seg(value);
	}
	return 0;
}

ISR(TIMER1_OVF_vect) // 2초 시간 지연 줄것-> 1초
{
	TCNT1 = OVERFLOW_1-94; // 125였던것을 250으로 두배 증가시켜서 2초로 할당 다시 1초 -> 약 0.75초 정도
	tick_time_1++;
	if(tick_time_1 == TPS_1) {
		j++;
		tick_time_1 = 0;
		
	}
}
ISR(TIMER0_COMP_vect)
{
	if(j==30){
		j=0;
	}
	OCR0=n[tmp];
}


void init_adc()
{
	DDRF &= 0xFE;
	ADMUX = 0x60; // ADLAR 이라는 레지스터값 0x20을 더해서 0x40 ->> 0x60 로 변경
	ADCSRA = 0x87;
}
unsigned short read_adc()
{
	unsigned char adc_low, adc_high;
	unsigned short value;
	ADCSRA |= 0x40;
	while ((ADCSRA & 0x10) != 0x10)
	;
	adc_low = ADCL;
	adc_high = ADCH;
	value = ((unsigned short)adc_high << 2) | ((unsigned short)adc_low>>6);
	return value;
}
void show_7seg(unsigned short value)
{
	int i;
	for(i=0; i<10; i++) {
		PORTC = num[value/1000];
		PORTG = 0x08;
		_delay_ms(2);
		PORTC = num[value/100%10];
		PORTG = 0x04;
		_delay_ms(2);
		PORTC = num[value%100/10];
		PORTG = 0x02;
		_delay_ms(2);
		PORTC = num[value%10];
		PORTG = 0x01;
		_delay_ms(2);
	}
}


